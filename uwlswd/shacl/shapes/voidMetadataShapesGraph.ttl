# (MCM) NOTE: I've included brief descriptions of several properties as comments for personal reference (they can be kept or deleted when we publish).
# (MCM) Actual notes/questions that I want feedback on are labeled [!NOTE]
# (MCM) Current draft is based off specifications provided here: https://www.w3.org/TR/void/

@prefix uwrda: <https://doi.org/10.6069/uwlib.55.d.4#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix dct: <http://purl.org/dc/terms/> .
@prefix rdaclass: <http://rdaregistry.info/Elements/c/> .
@prefix bf: <http://id.loc.gov/ontologies/bibframe/> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix void: <http://rdfs.org/ns/void#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix ldproc: <https://doi.org/10.6069/uwlib.55.b.2#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix ex: <http://www.example.org#> .
@prefix wv: <https://vocab.org/waiver/> .
@prefix foaf:  <http://xmlns.com/foaf/0.1/> .
@prefix format: <http://www.w3.org/ns/formats/> .

ex:voidMetadataDescriptionShape
  a sh:NodeShape ;
  sh:targetClass void:DatasetDescription ;
  sh:property [
    sh:path dct:title ;
    sh:nodeKind sh:Literal ;
    sh:uniqueLang true ;
    sh:minCount 1 ;
  ] ;
# This is the title of the VoID file, not the dataset being described.
  sh:property [
    sh:path [ sh:alternativePath (foaf:primaryTopic foaf:topic) ]
    sh:nodeKind sh:IRI ;
    sh:minCount 1 ;
  ] ;
# Use foaf:primaryTopic if the VoID file describes a single dataset; use foaf:topic if it describes several datasets of equal importance.
  sh:property [
    sh:path dct:creator ;
    sh:nodeKind sh:IRIOrLiteral ;
  ] ;
# This is the creator of the VoID file, not the dataset being described.
  sh:property [
    sh:path dct:created ;
    sh:or (
      [sh:datatype xsd:date]
      [sh:datatype xsd:gYear]
    ) ;
    sh:maxCount 1 ;
  ] .
# This is the creation date of the VoID file, not the dataset being described.
# [!NOTE] We can also add other properties here, if desired. These are just the examples from W3C.

ex:generalDatasetMetadataShape
  a sh:NodeShape ;
  sh:targetClass void:Dataset ;
  sh:property [
    sh:path foaf:homepage ;
    sh:nodeKind sh:IRI ;
    sh:maxCount 1 ;
  ] ;
# Use for the homepage for the dataset. Do not use for related pages that are not specifically about the dataset.
  sh:property [
    sh:path foaf:page ;
    sh:nodeKind sh:IRI ;
  ] ;
# Use for pages related to the dataset.
  sh:property [
    sh:path dct:title ;
    sh:nodeKind sh:Literal ;
    sh:uniqueLang true ;
    sh:minCount 1 ;
  ] ;
  sh:property [
    sh:path dct:description ;
    sh:nodeKind sh:Literal ;
    sh:uniqueLang true ;
    sh:minCount 1 ;
  ] ;
  sh:property [
    sh:path dct:creator ;
    sh:nodeKind sh:IRI ;
    sh:minCount 1 ;
  ] ;
  sh:property [
    sh:path dct:publisher ;
    sh:nodeKind sh:IRI ;
    sh:minCount 1 ;
  ] ;
  sh:property [
    sh:path dct:contributor ;
    sh:nodeKind sh:IRI ;
  ] ;
  sh:property [
    sh:path dct:source ;
    sh:nodeKind sh:IRI ;
  ] ;
# A related resource from which the dataset is derived.
  sh:property [
    sh:path dct:date ;
    sh:or (
      [sh:datatype xsd:date]
      [sh:datatype xsd:gYear]
    ) ;
  ] ;
# A point or period of time associated with an event in the life-cycle of the resource
  sh:property [
    sh:path dct:created ;
    sh:or (
      [sh:datatype xsd:date]
      [sh:datatype xsd:gYear]
    ) ;
    sh:maxCount 1 ;
  ] ;
  sh:property [
    sh:path dct:issued ;
    sh:or (
      [sh:datatype xsd:date]
      [sh:datatype xsd:gYear]
    ) ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
  ] ;
  sh:property [
    sh:path dct:modified ;
    sh:or (
      [sh:datatype xsd:date]
      [sh:datatype xsd:gYear]
    ) ;
  ] ;
  sh:property [
    sh:path dct:license ;
    sh:nodeKind sh:IRI ;
  ] ;
  sh:property [
    sh:path wv:norms ;
    sh:nodeKind sh:IRI ;
  ] ;
# Represent the general principles or "code of conduct" adopted by a community for access and use of resources.
  sh:property [
    sh:path wv:waiver ;
    sh:nodeKind sh:IRIOrLiteral ;
  ] ;
# Best practice is use the URI of a waiver legal document as the value of this property.
  sh:property [
    sh:path dct:subject ;
    sh:nodeKind sh:IRI ;
  ] ;
  sh:property [
    sh:path void:feature ;
    sh:in (
      format:N3
      format:N-Triples
      format:RDF_XML
      format:RDFa
      format:Turtle
    ) ;
    sh:class void:TechnicalFeature ;
  ] .

# [!NOTE] Separating these sections into distinct shapes for readability. They can be sectioned off in different ways or not at all, if we prefer.

ex:accessMetadataShape
# Describes how RDA data can be accessed using various protocols.
  a sh:NodeShape ;
  sh:targetClass void:Dataset ;
  sh:property [
    sh:path void:sparqlEndpoint ;
    sh:nodeKind sh:IRI ;
  ] ;
  sh:property [
    sh:path void:dataDump ;
    sh:nodeKind sh:IRI ;
    sh:class rdfs:Resource ;
  ] ;
  sh:property [
    sh:path void:rootResource ;
    sh:nodeKind sh:IRI ;
  ] ;
# Names particularly important or central resources that make good entry points for navigating the dataset.
sh:property [
  sh:path void:uriLookupEndpoint ;
  sh:nodeKind sh:IRI ;
] ;
sh:property [
  sh:path void:openSearchDescription ;
  sh:nodeKind sh:IRI ;
  sh:class foaf:Document ;
] .

ex:structuralMetadataShape
# Provides high-level information about the schema and internal structure of a dataset.
  a sh:NodeShape ;
  sh:targetClass void:Dataset ;
  sh:property [
    sh:path void:exampleResource ;
    sh:nodeKind sh:IRI ;
    sh:datatype rdfs:Resource ;
  ] ;
# Names particularly representative or typical resources in the dataset.
  sh:property [
    sh:path void:uriSpace ;
    sh:nodeKind sh:Literal ;
  ] ;
  sh:property [
    sh:path void:uriRegexPattern ;
    sh:nodeKind sh:Literal ;
  ] ;
  sh:property [
    sh:path void:vocabulary ;
    sh:nodeKind sh:IRI ;
  ] ;
  sh:property [
    sh:path void:subset ;
    sh:nodeKind sh:IRI ;
    sh:class void:Dataset ;
  ] ;
  sh:property [
    sh:path void:inDataset ;
    sh:nodeKind sh:IRI ;
    sh:class void:Dataset ;
    sh:maxCount 1 ;
  ] ;
# [!NOTE] W3C recommends only one void:inDataset, but it is not required -- how should we handle cardinality for these?
  sh:property [
    sh:path void:classPartition ;
    sh:nodeKind sh:BlankNodeOrIRI ;
    sh:node ex:subsetShape ;
  ] ;
  sh:property [
    sh:path void:propertyPartition ;
    sh:nodeKind sh:BlankNodeOrIRI ;
    sh:node ex:subsetShape ;
  ] .

ex:subsetShape ;
  a sh:NodeShape ;
  sh:targetNode void:subset ;
  sh:nodeKind sh:IRI ;
  sh:property [
    sh:path void:triples ;
    sh:datatype xsd:integer ;
  ] ;
  sh:property [
    sh:path void:entities ;
    sh:datatype xsd:integer ;
  ] ;
  sh:property [
    sh:path void:classes ;
    sh:datatype xsd:integer ;
  ] ;
  sh:property [
    sh:path void:properties ;
    sh:datatype xsd:integer ;
  ] ;
  sh:property [
    sh:path void:distinctSubjects ;
    sh:datatype xsd:integer ;
  ] ;
  sh:property [
    sh:path void:distinctObjects ;
    sh:datatype xsd:integer ;
  ] ;
  sh:property [
    sh:path void:documents ;
    sh:datatype xsd:integer ;
  ] .
# [!NOTE] Not sure how to target both void:class and void:property in the same shape -- is this possible? Right now I have it set to look for void:subset because it's a superproperty of the two, will this work?
# [!NOTE] I'm not sure if all these different statistical properties are necessary for classPartition/propertyPartition, but I included them all just in case.

ex:datasetStatisticsShape
  a sh:NodeShape ;
  sh:targetClass void:Dataset ;
  sh:property [
    sh:path void:triples ;
    sh:datatype xsd:integer ;
  ] ;
# The total number of RDF triples contained in the dataset.
  sh:property [
    sh:path void:entities ;
    sh:datatype xsd:integer ;
  ] ;
# The total number of entities of entities described in the dataset.
# [!NOTE] Would it be useful to write an entity shape?
  sh:property [
    sh:path void:classes ;
    sh:datatype xsd:integer ;
  ] ;
# The total number of distinct classes in the dataset.
  sh:property [
    sh:path void:properties ;
    sh:datatype xsd:integer ;
  ] ;
# The total number of distinct properties in the dataset.
  sh:property [
    sh:path void:distinctSubjects ;
    sh:datatype xsd:integer ;
  ] ;
# The total number of distinct subjects in the dataset.
  sh:property [
    sh:path void:distinctObjects ;
    sh:datatype xsd:integer ;
  ] ;
# The total number of distinct objects in the dataset.
  sh:property [
    sh:path void:documents ;
    sh:datatype xsd:integer ;
  ] .
# The total number of documents. Use if the dataset is published as a set of individual documents. Intended for datasets where the total number of triples or entities is hard to determine. void:triples or void:entities preferred where practical.

ex:linksetShape
  a sh:NodeShape ;
  sh:targetClass void:Linkset ;
  sh:property [
    sh:path void:target ;
    sh:nodeKind sh:IRI ;
    sh:class void:Dataset ;
    sh:minCount 2 ;
    sh:maxCount 2 ;
  ] ;
  sh:property [
    sh:path void:subjectsTarget ;
    sh:maxCount 1 ;
    sh:class void:Dataset ;
  ] ;
# Names the subjects of all link triples in the dataset.
  sh:property [
    sh:path void:objectsTarget ;
    sh:class void:Dataset ;
    sh:maxCount 1 ;
  ] ;
# Names the objects of all link triples in the dataset.
  sh:property [
    sh:path void:subset ;
    sh:nodeKind sh:IRI ;
    sh:class void:Dataset ;
  ] ;
# Used to state that a linkset is part of a larger dataset.
  sh:property [
    sh:path void:linkPredicate ;
    sh:nodeKind sh:IRI ;
    sh:class rdf:Property ;
  ] .
# [!NOTE] The linkset section has been a little over my head, might help to see an example of one?

ex:voidPropertiesShape
# Properties not included in other VoID shapes.
  a sh:NodeShape ;
  sh:targetClass void:Dataset ;
  sh:property [
    sh:path void:class ;
    sh:class rdfs:Class ;
  ] ;
  sh:property [
    sh:path void:property ;
    sh:class rdf:Property ;
  ] .
